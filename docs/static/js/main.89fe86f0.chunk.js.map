{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifEmptySearch.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","type","value","onChange","target","EmptySearch","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","length","item","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBC2BCQ,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAMC,iBACHJ,EAAWK,SACVP,EAAcE,GACdC,EAAc,MAKlB,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAjBc,SAACL,GACvBF,EAAcE,EAAMM,OAAOF,aCEpBG,EARK,WAChB,OACI,8BACI,+F,+BCLCC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,qBAAKI,UAAU,YAAYC,IAAKf,EAAKgB,IAAG,eAAUN,KAClD,4BAAIA,GAAS,6BCHZO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAUtC,OAJAC,qBAAU,WACNxB,EAAQC,GAAUrB,MAAK,SAAA6C,GAAI,OAAIF,EAAS,CAACf,KAAMiB,EAAMJ,SAAS,SAC/D,CAACpB,IAEGqB,EDR2BI,CAAazB,GAAjCa,EADuB,EAC7BN,KAAca,EADe,EACfA,QACtB,OACI,qCACI,oBAAIJ,UAAU,oDAAd,SAAmEhB,IACjEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEejDe,EAtBM,WAAO,IAAD,EACavC,mBAAS,IADtB,mBAChBwC,EADgB,KACJzC,EADI,KAOvB,OACI,qCACI,oBAAI8B,UAAU,QAAd,0BACA,cAAC,EAAD,CAAa9B,cAPH,SAACS,GACfT,EAAc,CAACS,GAAF,mBAAYgC,QAOrB,uBAEIA,GAAcA,EAAWC,OAAS,EAClC,+BAAMD,EAAWlB,KAAI,SAAAoB,GAAI,OAAI,cAAC,EAAD,CAAoB7B,SAAU6B,GAAhBA,MAA3C,OAEA,cAAC,EAAD,QCfhBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.89fe86f0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(inputValue.trim()) {\r\n            setCategories(inputValue);\r\n            setInputValue('');\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst EmptySearch = () => {\r\n    return (\r\n        <div>\r\n            <p>There is no data to show yet, please enter a valid keyword.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmptySearch;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=x9N0Z7qQOWeXUBoql1bAbKZeDpVtPyPs`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n};","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <img className=\"img__blur\" src={url} alt={`blur ${title}`}/>\r\n            <p>{title || 'No title description'}</p>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3 className=\"title__category animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map((img ) => <GifGridItem  key={img.id} {...img}/>)\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => setState({data: imgs, loading: false }));\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport EmptySearch from './components/GifEmptySearch';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    const handleAdd = (value) => {\r\n        setCategories([value, ...categories]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title\">GifExpertApp</h2>\r\n            <AddCategory setCategories={handleAdd}/>\r\n            <hr/>\r\n            { \r\n                categories && categories.length > 0 ? \r\n                <ol>{ categories.map(item => <GifGrid key={item} category={item}/>) } </ol>\r\n                :\r\n                <EmptySearch />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}